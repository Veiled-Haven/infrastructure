---
# defaults file for ansible-role-haproxy

# This variable controlls if the haprox.cfg file should be build based on the other variables.
# If this is set to `no` the haproxy.cfg simply is not managed
haproxy_manage_haproxy_cfg: true

# This variable determines if the haproxy Service should be enabled and restarted by this role.
# If you i.E. manage the Service via Pacemaker/Cluster Manager(CRM)
# this variable can be set to no/false
haproxy_manage_service: true

# This controlls weither the the https://haproxy.debian.net/ is used.
haproxy_use_debian_repo: true

# this Variable is only used when the `haproxy_use_debian_repo` variable is yes.
haproxy_version: 2.9

haproxy_cfg_global:
  -  log /dev/log    local0
  -  log /dev/log    local1 notice
  -  chroot /var/lib/haproxy
  -  stats socket /run/haproxy/admin.sock mode 660 level admin
  -  stats timeout 30s
  -  user haproxy
  -  group haproxy
  -  daemon
  -  # Default SSL material locations
  -  ca-base /etc/ssl/certs
  -  crt-base /etc/ssl/private
  -  # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
  -  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  -  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  -  ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

haproxy_cfg_defaults:
  - log     global
  - mode    http
  - option  httplog
  - option  dontlognull
  - timeout connect 5000
  - timeout client  50000
  - timeout server  50000
  - errorfile 400 /etc/haproxy/errors/400.http
  - errorfile 403 /etc/haproxy/errors/403.http
  - errorfile 408 /etc/haproxy/errors/408.http
  - errorfile 500 /etc/haproxy/errors/500.http
  - errorfile 502 /etc/haproxy/errors/502.http
  - errorfile 503 /etc/haproxy/errors/503.http
  - errorfile 504 /etc/haproxy/errors/504.http

# ansible_haproxy_caches:
#   - name: Cache001
#     total_max_size: 256
#     max_object_size: 2097152
#     max_age: 31536000
#

# haproxy_cfg_listeners:
#   - name: MySQL
#     options:
#       - "bind *:3306"
#       - "mode tcp"
#       - "timeout client  10800s"
#       - "timeout server  10800s"
#       - "balance leastconn"
#       - "option httpchk"
#       - "option allbackups"
#       - "default-server port 9200 inter 2s downinter 5s rise 3 fall 2 slowstart 60s maxconn 64 maxqueue 128 weight 100"
#       - "server galera1 192.168.55.111:3306 check"
#       - "server galera2 192.168.55.112:3306 check"
#       - "server galera3 192.168.55.113:3306 check"
#
# haproxy_cfg_frontends:
#   - name: web-frontend
#     options:
#       - "bind *:80"
#       - "mode http"
#       - "acl url_blog path_beg /blog"
#       - "use_backend blog-backend if url_blog"
#       - "default_backend web-backend"
#
# haproxy_cfg_backends:
#   - name: web-backend
#     options:
#       - "balance roundrobin"
#       - "server web1 web1.yourdomain.com:80 check"
#       - "server web2 web2.yourdomain.com:80 check"
#       - "http-request cache-use Cache001"
#       - "http-response cache-store Cache001"
#   - name: blog-backend
#     options:
#       - "balance roundrobin"
#       - "mode http"
#       - "server blog1 blog1.yourdomain.com:80 check"
#       - "server blog2 blog2.yourdomain.com:80 check"

# List of users to define for HTTP Basic Auth purposes
#
# Note that this list contains another sort of lists, this role is able to
# handle multiple 'userlists'
#
# You can use plaintext passwords here, this means that this role will transfer
# them to sha512 hashed passwords by its own, but you definitively should use
# Ansible vaults at all to store the passwords!
#
# Example for a plain userlist
# haproxy_cfg_userlists:
#   - name: devs
#     users:
#       - name: john-rambo
#         password: p0keym0n!
#       - name: splinter
#         password: {{ vault_password_splinter }}
#       - name: user_with_prehashed_password
#         hashed_password: $6$UTnA1szXGpy$yqIxfQS2.PxwB7whagIZDhhfxBDvgGklgYSYdHi3rL/dwHrSdUjilpVYJ/cV5HMVWSGZkQw2Lw0gekIdMjAWU/
haproxy_cfg_userlists: []

# Backend mapping support
#
# This list is able to deploy a backend mapping list config file.
#
# Multiple mappings are possible.
#
# Please note: This variable just deploys the backend mapping config file, it
# will not automagically included in your HAProxy config.
#
# Path of backend mapping file: /etc/haproxy/backends.map
#
# Example:
# haproxy_backend_mappings:
#   - domain: test.example.com
#     backend: back_test
#   - domain: test.foo.bar
#     backend: back_foo
haproxy_backend_mappings: []

# SSL cert list support
#
# This list is able to deploy a ssl cert list file.
#
# Multiple certs are possible.
#
# Please note: This variable just deploys the ssl cert file, it will not
# automagically included in your HAProxy config.
#
# Path of ssl cert list: /etc/haproxy/ssl-certs.list
#
# Example:
# haproxy_ssl_cert_list:
#   - pem_path: /etc/ssl/private/test.example.com
#     domain: app-service.nivea.de
#   - pem_path: /etc/ssl/private/star.foo.bar
#     domain: baz.foo.bar
haproxy_ssl_cert_list: []

# logrotate settings
haproxy_logrotate_rotate: 52
haproxy_logrotate_delaycompress: true
haproxy_logrotate_size: null

# haproxy_fd_limit defines the limit of open file descriptors
#
# Warning: Only supported in Ubuntu 20.04+
haproxy_fd_limit: 4096
